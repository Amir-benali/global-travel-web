{% extends 'front.html.twig' %}

{% block title %}AI Assistant{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .chat-container {
            height: calc(100vh - 240px);
            display: flex;
            flex-direction: column;
        }
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 1.5rem;
        }
        .message {
            max-width: 80%;
            margin-bottom: 1rem;
            padding: 0.75rem 1rem;
            border-radius: 1rem;
            position: relative;
            line-height: 1.5;
        }
        .message.user {
            background-color: #3b82f6;
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 0.25rem;
        }
        .message.assistant {
            background-color: #f3f4f6;
            color: #1f2937;
            margin-right: auto;
            border-bottom-left-radius: 0.25rem;
        }
        .message-time {
            font-size: 0.75rem;
            opacity: 0.7;
            margin-top: 0.25rem;
            text-align: right;
        }
        .typing-indicator {
            display: inline-flex;
            align-items: center;
            padding: 0.5rem 1rem;
            background-color: #f3f4f6;
            border-radius: 1rem;
            margin-bottom: 1rem;
        }
        .typing-dot {
            width: 8px;
            height: 8px;
            background-color: #9ca3af;
            border-radius: 50%;
            margin: 0 2px;
            animation: typing-animation 1.4s infinite ease-in-out;
        }
        .typing-dot:nth-child(1) { animation-delay: 0s; }
        .typing-dot:nth-child(2) { animation-delay: 0.2s; }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; }
        
        @keyframes typing-animation {
            0%, 60%, 100% { transform: translateY(0); }
            30% { transform: translateY(-5px); }
        }
        
        .chat-input {
            padding: 1rem;
            border-top: 1px solid #e5e7eb;
            background-color: white;
        }
        
        .message-content {
            white-space: pre-wrap;
        }
        
        .message-content a {
            color: #2563eb;
            text-decoration: underline;
        }
        
        .message.assistant .message-content a {
            color: #2563eb;
        }
        
        .message.user .message-content a {
            color: #e5e7eb;
        }
        
        /* Code block styling */
        .message-content pre {
            background-color: #1f2937;
            color: #e5e7eb;
            padding: 0.75rem;
            border-radius: 0.5rem;
            overflow-x: auto;
            margin: 0.75rem 0;
        }
        
        .message.assistant .message-content pre {
            background-color: #1f2937;
            color: #e5e7eb;
        }
        
        /* Markdown list styling */
        .message-content ul, .message-content ol {
            padding-left: 1.5rem;
            margin: 0.5rem 0;
        }
        
        .message-content ul li {
            list-style-type: disc;
        }
        
        .message-content ol li {
            list-style-type: decimal;
        }
    </style>
{% endblock %}

{% block body %}
<div class="mx-auto max-w-7xl">
    <!-- Sub Navigation -->
    <div class="bg-white rounded-lg shadow mb-6">
        <div class="flex items-center justify-between p-4">
            <div class="flex space-x-4">
                <a href="{{ path('app_chatbot') }}" class="px-4 py-2 text-blue-600 font-medium border-b-2 border-blue-600">AI Assistant</a>
            </div>
            <div>
                <a href="{{ path('front_dashboard') }}" class="flex items-center text-gray-600 hover:text-blue-600">
                    <i class="ri-arrow-left-line mr-1"></i>
                    Back to Dashboard
                </a>
            </div>
        </div>
    </div>
    
    <!-- Chat Container -->
    <div class="bg-white rounded-lg shadow overflow-hidden chat-container">
        <div class="p-4 border-b border-gray-200">
            <div class="flex items-center">
                <div class="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center text-blue-600 mr-3">
                    <i class="ri-robot-line text-xl"></i>
                </div>
                <div>
                    <h2 class="text-lg font-medium text-gray-900">AI Assistant</h2>
                </div>
            </div>
        </div>
        
        <div class="chat-messages" id="chat-messages">
            <div class="message assistant">
                <div class="message-content">
                    Hello! I'm your AI assistant. How can I help you today?
                </div>
                <div class="message-time">Just now</div>
            </div>
        </div>
        
        <div class="chat-input">
            <form id="chat-form" class="flex items-center">
                <input 
                    type="text" 
                    id="user-input" 
                    placeholder="Type your message here..." 
                    class="flex-1 px-4 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                <button 
                    type="submit" 
                    class="px-4 py-2 bg-blue-500 text-white rounded-r-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                >
                    <i class="ri-send-plane-fill"></i>
                </button>
            </form>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const chatForm = document.getElementById('chat-form');
        const userInput = document.getElementById('user-input');
        const chatMessages = document.getElementById('chat-messages');
        
        // Store conversation history
        let conversationHistory = [];
        
        // Function to format the current time
        function formatTime() {
            const now = new Date();
            return now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }
        
        // Function to add a message to the chat
        function addMessage(content, sender) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message', sender);
            
            const messageContent = document.createElement('div');
            messageContent.classList.add('message-content');
            
            // Process markdown-like formatting
            let formattedContent = content
                // Links
                .replace(/\[([^\]]+)\]$$([^)]+)$$/g, '<a href="$2" target="_blank">$1</a>')
                // Bold
                .replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>')
                // Italic
                .replace(/\*([^*]+)\*/g, '<em>$1</em>')
                // Code blocks
                .replace(/\`\`\`([^`]+)\`\`\`/g, '<pre>$1</pre>')
                // Inline code
                .replace(/`([^`]+)`/g, '<code>$1</code>');
            
            messageContent.innerHTML = formattedContent;
            
            const messageTime = document.createElement('div');
            messageTime.classList.add('message-time');
            messageTime.textContent = formatTime();
            
            messageDiv.appendChild(messageContent);
            messageDiv.appendChild(messageTime);
            
            chatMessages.appendChild(messageDiv);
            
            // Scroll to the bottom
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // Add to conversation history
            conversationHistory.push({
                role: sender === 'user' ? 'user' : 'model',
                content: content
            });
        }
        
        // Function to show typing indicator
        function showTypingIndicator() {
            const indicator = document.createElement('div');
            indicator.classList.add('typing-indicator');
            indicator.id = 'typing-indicator';
            
            for (let i = 0; i < 3; i++) {
                const dot = document.createElement('div');
                dot.classList.add('typing-dot');
                indicator.appendChild(dot);
            }
            
            chatMessages.appendChild(indicator);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        // Function to hide typing indicator
        function hideTypingIndicator() {
            const indicator = document.getElementById('typing-indicator');
            if (indicator) {
                indicator.remove();
            }
        }
        
        // Function to send a message to the API
        async function sendMessageToAPI(message) {
            try {
                console.log('Sending message to API:', message);
                console.log('Conversation history:', conversationHistory);
                
                const response = await fetch('{{ path('app_chatbot_message') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        message: message,
                        conversation: conversationHistory
                    }),
                });
                
                console.log('API response status:', response.status);
                
                const data = await response.json();
                console.log('API response data:', data);
                
                if (data.status === 'success') {
                    return data.response;
                } else {
                    throw new Error(data.error || 'Failed to get response');
                }
            } catch (error) {
                console.error('Error:', error);
                return 'Sorry, I encountered an error while processing your request. Please try again.';
            }
        }
        
        // Function to handle form submission
        chatForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const message = userInput.value.trim();
            if (!message) return;
            
            // Clear input
            userInput.value = '';
            
            // Add user message to chat
            addMessage(message, 'user');
            
            // Show typing indicator
            showTypingIndicator();
            
            // Send message to API
            const response = await sendMessageToAPI(message);
            
            // Hide typing indicator
            hideTypingIndicator();
            
            // Add assistant response to chat
            addMessage(response, 'assistant');
        });
        
        // Focus input on page load
        userInput.focus();
    });
</script>
{% endblock %}