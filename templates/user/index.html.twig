{% extends 'base.html.twig' %}

{% block title %}Users Management{% endblock %}

{% block body %}

<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <!-- Statistics Dashboard -->
    <div class="mb-8 bg-white rounded-lg shadow">
        <div class="p-4 border-b border-gray-200 flex justify-between items-center">
            <h2 class="text-lg font-medium text-gray-900">User Statistics</h2>
            <button id="manage-users-btn" class="px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg shadow flex items-center">
                Manage Users
                <i class="ri-arrow-down-s-line ml-2"></i>
            </button>
        </div>
        
        <div class="p-4 grid grid-cols-1 md:grid-cols-3 gap-4">
            {# Total Users Card #}
            <div class="bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg shadow p-4 text-white">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-purple-100">Total Users</p>
                        <p class="text-3xl font-bold">{{ stats.totalUsers }}</p>
                    </div>
                    <div class="bg-purple-400 bg-opacity-30 rounded-full p-3">
                        <i class="ri-user-line text-2xl"></i>
                    </div>
                </div>
            </div>
            
            {# Active Users Card #}
            <div class="bg-gradient-to-r from-green-500 to-green-600 rounded-lg shadow p-4 text-white">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-green-100">Active Users</p>
                        <p class="text-3xl font-bold">{{ stats.activeUsers }}</p>
                    </div>
                    <div class="bg-green-400 bg-opacity-30 rounded-full p-3">
                        <i class="ri-user-follow-line text-2xl"></i>
                    </div>
                </div>
            </div>
            
            {# Admin Users Card #}
            <div class="bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg shadow p-4 text-white">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-blue-100">Admin Users</p>
                        <p class="text-3xl font-bold">{{ stats.roleStats.admin }}</p>
                    </div>
                    <div class="bg-blue-400 bg-opacity-30 rounded-full p-3">
                        <i class="ri-admin-line text-2xl"></i>
                    </div>
                </div>
            </div>
        </div>
        
        {# User Roles Distribution #}
        <div class="p-4">
            <h3 class="text-md font-medium text-gray-700 mb-4">User Roles Distribution</h3>
            <div class="flex items-center space-x-2">
                <div class="flex-1 bg-gray-200 rounded-full h-4">
                    {% set adminPercent = stats.totalUsers > 0 ? (stats.roleStats.admin / stats.totalUsers * 100) : 0 %}
                    {% set responsablePercent = stats.totalUsers > 0 ? (stats.roleStats.responsable / stats.totalUsers * 100) : 0 %}
                    {% set employeePercent = stats.totalUsers > 0 ? (stats.roleStats.employee / stats.totalUsers * 100) : 0 %}
                    
                    <div class="flex h-full rounded-full overflow-hidden">
                        <div class="bg-purple-600 h-full" style="width: {{ adminPercent }}%"></div>
                        <div class="bg-blue-600 h-full" style="width: {{ responsablePercent }}%"></div>
                        <div class="bg-gray-600 h-full" style="width: {{ employeePercent }}%"></div>
                    </div>
                </div>
            </div>
            <div class="flex justify-between mt-2 text-sm">
                <div class="flex items-center">
                    <span class="w-3 h-3 bg-purple-600 rounded-full mr-1"></span>
                    <span>Admin ({{ stats.roleStats.admin }})</span>
                </div>
                <div class="flex items-center">
                    <span class="w-3 h-3 bg-blue-600 rounded-full mr-1"></span>
                    <span>Responsable ({{ stats.roleStats.responsable }})</span>
                </div>
                <div class="flex items-center">
                    <span class="w-3 h-3 bg-gray-600 rounded-full mr-1"></span>
                    <span>Employee ({{ stats.roleStats.employee }})</span>
                </div>
            </div>
        </div>
        
        {# Charts #}
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 p-4">
            <div class="bg-white rounded-lg shadow p-4 border border-gray-100">
                <h3 class="text-md font-medium text-gray-700 mb-4">User Roles</h3>
                <div class="h-64">
                    <canvas id="roleChart"></canvas>
                </div>
            </div>
            
            <div class="bg-white rounded-lg shadow p-4 border border-gray-100">
                <h3 class="text-md font-medium text-gray-700 mb-4">User Growth Estimation</h3>
                <div class="h-64">
                    <canvas id="growthChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div id="users-table" class="bg-white rounded-lg shadow border border-gray-200 mb-8">
        <!-- Table toolbar -->
        <div class="p-4 border-b border-gray-200 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            <div class="flex items-center">
                <button id="delete-selected" class="flex items-center px-3 py-1 border border-gray-300 rounded-md text-sm text-red-600 hover:bg-red-50 hidden">
                    <i class="ri-delete-bin-line mr-1"></i>
                    Delete Selected
                </button>
            </div>
            
            <form method="get" action="{{ path('app_user') }}" class="w-full sm:w-auto">
                <div class="relative">
                    <i class="ri-search-line absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                    <input 
                        type="text" 
                        name="search"
                        placeholder="Search users..." 
                        value="{{ app.request.query.get('search') }}"
                        class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 w-full sm:w-64"
                    />
                    {% if app.request.query.get('search') %}
                        <a href="{{ path('app_user') }}" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600">
                            <i class="ri-close-line"></i>
                        </a>
                    {% endif %}
                </div>
            </form>
        </div>
        
        <!-- Table -->
        <div class="overflow-x-auto p-2">
            <table class="w-full border-collapse rounded-lg overflow-hidden">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="w-12 px-4 py-3">
                            <input type="checkbox" id="select-all" class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                        </th>
                        <th class="px-4 py-3 text-left text-sm font-medium text-gray-500 sortable" data-field="firstname">
                            <div class="flex items-center cursor-pointer">
                                User Name
                                <svg class="ml-1 w-3 h-3 text-gray-400 sort-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
                                </svg>
                            </div>
                        </th>
                        <th class="px-4 py-3 text-left text-sm font-medium text-gray-500 sortable" data-field="email">
                            <div class="flex items-center cursor-pointer">
                                Email Address
                                <svg class="ml-1 w-3 h-3 text-gray-400 sort-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
                                </svg>
                            </div>
                        </th>
                        <th class="px-4 py-3 text-left text-sm font-medium text-gray-500 sortable" data-field="phoneNumber">
                            <div class="flex items-center cursor-pointer">
                                Phone Number
                                <svg class="ml-1 w-3 h-3 text-gray-400 sort-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
                                </svg>
                            </div>
                        </th>
                        <th class="px-4 py-3 text-left text-sm font-medium text-gray-500 sortable" data-field="roles">
                            <div class="flex items-center cursor-pointer">
                                Role
                                <svg class="ml-1 w-3 h-3 text-gray-400 sort-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
                                </svg>
                            </div>
                        </th>
                        <th class="px-4 py-3 text-left text-sm font-medium text-gray-500">
                            <div class="flex items-center">
                                Actions
                            </div>
                        </th>
                    </tr>
                </thead>
                
                <tbody class="divide-y divide-gray-200 bg-white">
                    {% for user in users %}
                    <tr class="user-row hover:bg-gray-50" data-user-id="{{ user.id }}">
                        <td class="px-4 py-3">
                            <input type="checkbox" class="user-checkbox rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                        </td>
                        <td class="px-4 py-3">
                            <div class="flex items-center">
                                <div class="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center text-blue-600 mr-3">
                                    {{ user.firstname|first|upper }}{{ user.lastname|first|upper }}
                                </div>
                                <span class="text-sm font-medium text-gray-900">
                                    {{ user.firstname }} {{ user.lastname }}
                                </span>
                            </div>
                        </td>
                        <td class="px-4 py-3 text-sm text-gray-500">{{ user.email }}</td>
                        <td class="px-4 py-3 text-sm text-gray-500">{{ user.phoneNumber ?? '-' }}</td>
                        <td class="px-4 py-3 text-sm text-gray-500">
                            {% if 'ROLE_ADMIN' in user.roles %}
                                <span class="px-2 py-1 bg-purple-100 text-purple-800 text-xs rounded-full">Admin</span>
                            {% elseif 'ROLE_RESPONSABLE' in user.roles  %}
                                <span class="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">Responsable</span>
                            {% else %}
                                <span class="px-2 py-1 bg-gray-100 text-gray-800 text-xs rounded-full">Employee</span>
                            {% endif %}</td>
                        <td class="px-4 py-3 text-sm">
                            <div class="flex items-center space-x-3">
                                <a href="{{ path('app_user_update', { id: user.id }) }}" 
                                   class="text-blue-400 hover:text-blue-600"
                                   title="Edit">
                                    <i class="ri-pencil-line"></i>
                                </a>
                                <form method="post" action="{{ path('app_user_delete', { id: user.id }) }}" 
                                      onsubmit="return confirm('Are you sure you want to delete this user?')">
                                    <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ user.id) }}">
                                    <button type="submit" class="text-red-400 hover:text-red-600" title="Delete">
                                        <i class="ri-delete-bin-line"></i>
                                    </button>
                                </form>
                            </div>
                        </td>
                    </tr>
                    {% else %}
                    <tr>
                        <td colspan="6" class="px-4 py-8 text-center text-gray-500">
                            <i class="ri-user-search-line text-3xl mb-2 text-gray-300"></i>
                            <p>No users found</p>
                            {% if app.request.query.get('search') %}
                                <a href="{{ path('app_user') }}" class="text-blue-500 hover:underline mt-2 inline-block">
                                    Clear search
                                </a>
                            {% endif %}
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>

{% block javascripts %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Scroll to users table when "Manage Users" button is clicked
    document.getElementById('manage-users-btn').addEventListener('click', function() {
        document.getElementById('users-table').scrollIntoView({ behavior: 'smooth' });
    });

    // User roles pie chart
    const roleCtx = document.getElementById('roleChart').getContext('2d');
    const roleChart = new Chart(roleCtx, {
        type: 'doughnut',
        data: {
            labels: ['Admin', 'Responsable', 'Employee'],
            datasets: [{
                data: [{{ stats.roleStats.admin }}, {{ stats.roleStats.responsable }}, {{ stats.roleStats.employee }}],
                backgroundColor: [
                    'rgba(147, 51, 234, 0.8)',  // Purple for Admin
                    'rgba(59, 130, 246, 0.8)',  // Blue for Responsable
                    'rgba(75, 85, 99, 0.8)'     // Gray for Employee
                ],
                borderWidth: 0
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            },
            cutout: '70%'
        }
    });
    
    // User growth chart with real data - truly dynamic
    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    const currentDate = new Date();
    const currentMonth = currentDate.getMonth(); // 0-indexed (0 = January, 11 = December)
    const currentUsers = {{ stats.totalUsers }}; // Get actual user count from the server
    
    // Create realistic growth data starting from current month
    const growthData = {};
    
    // Fill past months with historical data or estimates
    for (let i = 0; i < currentMonth; i++) {
        // For past months, we'll use a simple backtracking algorithm
        // This assumes slower growth in the past
        const monthsAgo = currentMonth - i;
        const estimatedPastUsers = Math.max(1, Math.round(currentUsers / Math.pow(1.2, monthsAgo)));
        growthData[months[i]] = estimatedPastUsers;
    }
    
    // Current month has actual user count
    growthData[months[currentMonth]] = currentUsers;
    
    // Future months show projected growth
    // The growth rate adapts based on the current user count
    // Smaller user bases tend to grow faster percentage-wise
    const baseGrowthRate = currentUsers < 10 ? 1.5 : // 50% monthly growth for very small user bases
                       currentUsers < 50 ? 1.3 : // 30% for small user bases
                       currentUsers < 200 ? 1.2 : // 20% for medium user bases
                       1.1; // 10% for large user bases
    
    let projectedUsers = currentUsers;
    for (let i = currentMonth + 1; i < months.length; i++) {
        projectedUsers = Math.round(projectedUsers * baseGrowthRate);
        growthData[months[i]] = projectedUsers;
    }
    
    const growthCtx = document.getElementById('growthChart').getContext('2d');
    const growthChart = new Chart(growthCtx, {
        type: 'line',
        data: {
            labels: Object.keys(growthData),
            datasets: [{
                label: 'Estimated User Growth',
                data: Object.values(growthData),
                borderColor: 'rgba(59, 130, 246, 1)',
                backgroundColor: 'rgba(59, 130, 246, 0.1)',
                tension: 0.4,
                fill: true
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    callbacks: {
                        title: function(tooltipItems) {
                            const month = tooltipItems[0].label;
                            const isCurrentOrPast = months.indexOf(month) <= currentMonth;
                            return month + (isCurrentOrPast ? ' (Actual)' : ' (Estimated)');
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Total Users'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Month'
                    }
                }
            }
        }
    });

    // Gestion de la sélection multiple
    const selectAll = document.getElementById('select-all');
    const checkboxes = document.querySelectorAll('.user-checkbox');
    const deleteBtn = document.getElementById('delete-selected');
    
    selectAll.addEventListener('change', function() {
        checkboxes.forEach(checkbox => {
            checkbox.checked = selectAll.checked;
        });
        toggleDeleteButton();
    });
    
    checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', toggleDeleteButton);
    });
    
    function toggleDeleteButton() {
        const checked = document.querySelectorAll('.user-checkbox:checked');
        deleteBtn.classList.toggle('hidden', checked.length === 0);
    }
    
    // Confirmation avant suppression multiple
    deleteBtn.addEventListener('click', function() {
        const selectedIds = Array.from(document.querySelectorAll('.user-checkbox:checked'))
            .map(checkbox => checkbox.closest('tr').dataset.userId);
        
        if (confirm(`Are you sure you want to delete ${selectedIds.length} selected users?`)) {
            // Implémentez ici la logique de suppression multiple
            console.log('Users to delete:', selectedIds);
        }
    });

    // Search functionality
    const searchInput = document.querySelector('input[name="search"]');
    const tbody = document.querySelector('table tbody');
    const sortableHeaders = document.querySelectorAll('th.sortable');

    let sortField = 'firstname';
    let sortDirection = 'asc';

    function loadUsers() {
        const query = searchInput.value;

        const url = new URL('{{ path('app_user') }}', window.location.origin);
        url.searchParams.append('search', query);
        url.searchParams.append('sortField', sortField);
        url.searchParams.append('sortDirection', sortDirection);

        fetch(url, {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.text())
        .then(html => {
            tbody.innerHTML = html;
        });
    }

    searchInput.addEventListener('input', function() {
        loadUsers();
    });

    sortableHeaders.forEach(header => {
        header.addEventListener('click', function() {
            const field = this.getAttribute('data-field');
            if (field === sortField) {
                // Si on clique deux fois sur la même colonne, on inverse le sens
                sortDirection = (sortDirection === 'asc') ? 'desc' : 'asc';
            } else {
                sortField = field;
                sortDirection = 'asc';
            }
            loadUsers();
        });
    });
});
</script>
{% endblock %}

{% endblock %}
